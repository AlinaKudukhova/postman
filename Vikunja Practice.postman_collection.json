{
	"info": {
		"_postman_id": "87ee80f0-4e38-466a-8b7c-1806fd32ffd7",
		"name": "Vikunja Practice",
		"description": "# Pagination\nEvery endpoint capable of pagination will return two headers:\n* `x-pagination-total-pages`: The total number of available pages for this request\n* `x-pagination-result-count`: The number of items returned for this request.\n# Rights\nAll endpoints which return a single item (project, task, etc.) - no array - will also return a `x-max-right` header with the max right the user has on this item as an int where `0` is `Read Only`, `1` is `Read & Write` and `2` is `Admin`.\nThis can be used to show or hide ui elements based on the rights the user has.\n# Errors\nAll errors have an error code and a human-readable error message in addition to the http status code. You should always check for the status code in the response, not only the http status code.\nDue to limitations in the swagger library we're using for this document, only one error per http status code is documented here. Make sure to check the [error docs](https://vikunja.io/docs/errors/) in Vikunja's documentation for a full list of available error codes.\n# Authorization\n**JWT-Auth:** Main authorization method, used for most of the requests. Needs `Authorization: Bearer <jwt-token>`-header to authenticate successfully.\n\n**API Token:** You can create scoped API tokens for your user and use the token to make authenticated requests in the context of that user. The token must be provided via an `Authorization: Bearer <token>` header, similar to jwt auth. See the documentation for the `api` group to manage token creation and revocation.\n\n**BasicAuth:** Only used when requesting tasks via CalDAV.\n<!-- ReDoc-Inject: <security-definitions> -->\n\nContact Support:\n Name: General Vikunja contact\n Email: hello@vikunja.io",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "29457921"
	},
	"item": [
		{
			"name": "lable",
			"item": [
				{
					"name": "Lable 201",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Check if label is created successfully\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"pm.test(\"Response body has key 'title'\", function () {\r",
									"    pm.expect(jsonData).to.have.property('title');\r",
									"});\r",
									"\r",
									"// Сохранение id созданного Label в коллекцию\r",
									"if (jsonData.id) {\r",
									"    pm.collectionVariables.set(\"createdLabelId\", jsonData.id); // Сохранение id в переменной коллекции\r",
									"} else {\r",
									"    console.log(\"ID not found in response.\");\r",
									"}\r",
									"\r",
									"pm.collectionVariables.set(\"createdLabelTitle\", jsonData.title);\r",
									"var requestBody = pm.request.body.raw; // Получение тела запроса\r",
									"var requestJson = JSON.parse(requestBody); // Парсинг JSON\r",
									"var requestTitle = requestJson.title; // Извлечение title из тела запроса\r",
									"\r",
									"// Сравнение title из запроса и ответа\r",
									"pm.test(\"Title from request matches title from response\", function () {\r",
									"    pm.expect(requestTitle).to.eql(jsonData.title);\r",
									"});\r",
									"\r",
									"// Логирование значений в консоль\r",
									"console.log(\"Title from request:\", requestTitle);\r",
									"console.log(\"Title from response:\", jsonData.title);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\r\n    \"title\": \"AlinaQA1\"\r\n\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/labels",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"labels"
							]
						}
					},
					"response": []
				},
				{
					"name": "Lable 201 (1 character)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\r\n    \"title\": \"A\"\r\n\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/labels",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"labels"
							]
						}
					},
					"response": []
				},
				{
					"name": "Lable 201 (250 characters)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\r\n    \"title\": \"орироиориориорирриоорррррррррррррррррррррррррррррррррррррррррррррролллллллллллллллллллллллллллллллллллллллллллллллллллллллллллллллллллллллллллллллллллллллллллллллллллллллллллллллллллллллллллллоооооооооооооооооооооооооооооооооооооооооооррррррррррррррщ\"\r\n\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/labels",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"labels"
							]
						}
					},
					"response": []
				},
				{
					"name": "Lable 201 (249 characters)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\r\n    \"title\": \"рироиориориорирриоорррррррррррррррррррррррррррррррррррррррррррррролллллллллллллллллллллллллллллллллллллллллллллллллллллллллллллллллллллллллллллллллллллллллллллллллллллллллллллллллллллллллллллоооооооооооооооооооооооооооооооооооооооооооррррррррррррррщ\"\r\n\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/labels",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"labels"
							]
						}
					},
					"response": []
				},
				{
					"name": "Lable 400 (null)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 400\", function () {\r",
									"  pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\r\n    \"title\": null\r\n\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/labels",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"labels"
							]
						}
					},
					"response": []
				},
				{
					"name": "Lable 400 (251 characters)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 400\", function () {\r",
									"  pm.response.to.have.status(400);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"title\": \"5орироиориориорирриоорррррррррррррррррррррррррррррррррррррррррррррролллллллллллллллллллллллллллллллллллллллллллллллллллллллллллллллллллллллллллллллллллллллллллллллллллллллллллллллллллллллллллллоооооооооооооооооооооооооооооооооооооооооооррррррррррррррщ\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/labels",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"labels"
							]
						}
					},
					"response": []
				},
				{
					"name": "Lable 400 (number)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 400\", function () {\r",
									"  pm.response.to.have.status(400);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"title\": 12345\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/labels",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"labels"
							]
						}
					},
					"response": []
				},
				{
					"name": "Lable 400 (boolean)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 400\", function () {\r",
									"  pm.response.to.have.status(400);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"title\": true\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/labels",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"labels"
							]
						}
					},
					"response": []
				},
				{
					"name": "Lable 400 (no title)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 400\", function () {\r",
									"  pm.response.to.have.status(400);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/labels",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"labels"
							]
						}
					},
					"response": []
				},
				{
					"name": "Label 401 no token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 401\", function () {\r",
									"  pm.expect(pm.response.code).to.equal(401);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\r\n    \"title\": \"AlinaQA\"\r\n\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/labels",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"labels"
							]
						}
					},
					"response": []
				},
				{
					"name": "Lable 415",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 415\", function () {\r",
									"  pm.response.to.have.status(415);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\r\n    \"title\": \"AlinaQA1\"\r\n\r\n}",
							"options": {
								"raw": {
									"language": "text"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/labels",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"labels"
							]
						}
					},
					"response": []
				},
				{
					"name": "Lable 404",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 404\", function () {\r",
									"  pm.response.to.have.status(404);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"AlinaQA1\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/labels",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"labels"
							]
						}
					},
					"response": []
				},
				{
					"name": "Lable 200",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/labels/496",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"labels",
								"496"
							]
						}
					},
					"response": []
				},
				{
					"name": "Lable 403",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 403\", function () {\r",
									"  pm.response.to.have.status(403);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/labels/9999",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"labels",
								"9999"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "apikey",
				"apikey": [
					{
						"key": "value",
						"value": "Bearer {{token}}",
						"type": "string"
					},
					{
						"key": "key",
						"value": "Authorization",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "login",
			"item": [
				{
					"name": "Login 200",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"pm.globals.set(\"token\", jsonData.token);",
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has token property\", function () {",
									"    pm.expect(pm.response.json()).to.have.property('token');",
									"});",
									"",
									"pm.test(\"Response has a JSON content type\", function () {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
									"});",
									"",
									"pm.test(\"Token is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.token).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Token should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Token is in a valid JWT format\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.token).to.match(/^[A-Za-z0-9-_]+\\.[A-Za-z0-9-_]+\\.[A-Za-z0-9-_=]+$/, \"Token should be in a valid JWT format\");",
									"});",
									"",
									"",
									"pm.test(\"Token is not expired\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.token).to.exist.and.to.be.a('string');",
									"    // Add additional checks for token expiration if needed",
									"});",
									"",
									"",
									"pm.test(\"Response time is within an acceptable range\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//pm.collectionVariables.get(\"email\");\r",
									"//pm.collectionVariables.get(\"username\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "Bearer {{token}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "Authorization",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"long_token\": true,\n    \"password\": \"172839qQ!\",\n    \"totp_passcode\": \"{{email}}\",\n    \"username\": \"{{username}}\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"login"
							]
						},
						"description": "Logs a user in. Returns a JWT-Token to authenticate further requests."
					},
					"response": []
				},
				{
					"name": "Login 412",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"pm.collectionVariables.set(\"token\", jsonData.token);",
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has token property\", function () {",
									"    pm.expect(pm.response.json()).to.have.property('token');",
									"});",
									"",
									"pm.test(\"Response has a JSON content type\", function () {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
									"});",
									"",
									"pm.test(\"Token is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.token).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Token should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Token is in a valid JWT format\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.token).to.match(/^[A-Za-z0-9-_]+\\.[A-Za-z0-9-_]+\\.[A-Za-z0-9-_=]+$/, \"Token should be in a valid JWT format\");",
									"});",
									"",
									"",
									"pm.test(\"Token is not expired\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.token).to.exist.and.to.be.a('string');",
									"    // Add additional checks for token expiration if needed",
									"});",
									"",
									"",
									"pm.test(\"Response time is within an acceptable range\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//pm.collectionVariables.get(\"email\");\r",
									"//pm.collectionVariables.get(\"username\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "Bearer {{token}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "Authorization",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"password\": \"172839qQ!1\",\n    \"username\": \"Arch\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"login"
							]
						},
						"description": "Logs a user in. Returns a JWT-Token to authenticate further requests."
					},
					"response": []
				},
				{
					"name": "Login 404",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"pm.collectionVariables.set(\"token\", jsonData.token);",
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has token property\", function () {",
									"    pm.expect(pm.response.json()).to.have.property('token');",
									"});",
									"",
									"pm.test(\"Response has a JSON content type\", function () {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
									"});",
									"",
									"pm.test(\"Token is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.token).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Token should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Token is in a valid JWT format\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.token).to.match(/^[A-Za-z0-9-_]+\\.[A-Za-z0-9-_]+\\.[A-Za-z0-9-_=]+$/, \"Token should be in a valid JWT format\");",
									"});",
									"",
									"",
									"pm.test(\"Token is not expired\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.token).to.exist.and.to.be.a('string');",
									"    // Add additional checks for token expiration if needed",
									"});",
									"",
									"",
									"pm.test(\"Response time is within an acceptable range\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//pm.collectionVariables.get(\"email\");\r",
									"//pm.collectionVariables.get(\"username\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "Bearer {{token}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "Authorization",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"password\": \"172839qQ!1\",\n    \"username\": \"Arch\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"login"
							]
						},
						"description": "Logs a user in. Returns a JWT-Token to authenticate further requests."
					},
					"response": []
				}
			]
		},
		{
			"name": "Register",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var email = pm.response.json().email\r",
							"var username = pm.response.json().username\r",
							"\r",
							"pm.collectionVariables.set(\"email\", email);\r",
							"pm.collectionVariables.set(\"username\", username);\r",
							"\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type header is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response is a valid JSON object with required properties\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData).to.have.property('id').to.be.a('number');\r",
							"    pm.expect(responseData).to.have.property('name').to.be.a('string');\r",
							"    pm.expect(responseData).to.have.property('username').to.be.a('string');\r",
							"    pm.expect(responseData).to.have.property('email').to.be.a('string');\r",
							"    pm.expect(responseData).to.have.property('created').to.be.a('string');\r",
							"    pm.expect(responseData).to.have.property('updated').to.be.a('string');\r",
							"});\r",
							"\r",
							"pm.test(\"Email is in a valid format\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    pm.expect(responseData.email).to.match(/\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,}\\b/);\r",
							"});\r",
							"\r",
							"pm.test(\"username from request equals username for response\", function () {\r",
							"    username_req =  JSON.parse(pm.request.body.raw).username\r",
							"    username_res =  pm.response.json().username\r",
							"    console.log(\"username_req = \" + username_req)\r",
							"    console.log(\"username_res = \" + username_res)\r",
							"    pm.expect(username_req).to.eql(username_res);\r",
							"    \r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "value",
							"value": "Bearer {{token}}",
							"type": "string"
						},
						{
							"key": "key",
							"value": "Authorization",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"email\": \"{{$randomEmail}}\",\n    \"id\": 0,\n    \"password\": \"172839qQ!\",\n    \"username\": \"{{$randomFirstName}}\"\n}",
					"options": {
						"raw": {
							"headerFamily": "json",
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/register",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"register"
					]
				},
				"description": "Creates a new user account."
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "email",
			"value": ""
		},
		{
			"key": "username",
			"value": ""
		},
		{
			"key": "createdLabelId",
			"value": ""
		},
		{
			"key": "createdLabelTitle",
			"value": ""
		}
	]
}